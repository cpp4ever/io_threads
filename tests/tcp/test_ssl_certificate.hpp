/*
   Part of the io_threads project (https://github.com/cpp4ever/io_threads), under the MIT License
   SPDX-License-Identifier: MIT

   Copyright (c) 2024 Mikhail Smirnov

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the Software), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
*/

#pragma once

#include <array>
#include <bit>
#include <cstdint>
#include <string_view>

namespace io_threads::tests
{

[[maybe_unused]] constexpr auto test_domain = std::string_view{"io_threads.test"};

/// Self-signed ssl certificate for test_domain:
/// openssl req -x509 -newkey rsa:2048 -sha256 -days 5000 -nodes -keyout io_threads.key -out io_threads.pem -subj "/CN=io_threads.test"
[[maybe_unused, nodiscard]] constexpr std::string_view test_certificate_pem() noexcept
{
   return
   {
      R"raw(
-----BEGIN CERTIFICATE-----
MIIDFTCCAf2gAwIBAgIUeAUM/4E3yLrGNiKWluvmz7KyGkkwDQYJKoZIhvcNAQEL
BQAwGjEYMBYGA1UEAwwPaW9fdGhyZWFkcy50ZXN0MB4XDTI0MTAxMDE3NDIxMloX
DTM4MDYxOTE3NDIxMlowGjEYMBYGA1UEAwwPaW9fdGhyZWFkcy50ZXN0MIIBIjAN
BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx2XyJOGuJt9fQ7D7zKCm4V8PylG/
9EUtItTPe+1S0cOrj8xMke02CbPbt57e3axec4jQ//2TebUqFyA/nGvVESqBBVxY
mGci5bFdT3IWABxGRUZbfce99D24ihxXnhn/jR5haXJpOJqUmV3EYB1+ZZTnB4Mb
fplUwWKWA8AXMqlsx0/NbMGREnh+PEC2IAoUP7/DP/tUYEapZQ0KTAVze6AoGD0Y
JuFvs0zeaPc13UHesxAwfauoA5NgOQhHzGRVNCMVDKw8jMEnuZ/y8EDT5W0NTe0W
wSMq+UWe5hLv3JEzD7bhdGxLutwmIdl8vbGmJuXq9IShXC3AvjK2LNEhvQIDAQAB
o1MwUTAdBgNVHQ4EFgQUPQZ/q+iYA5HiauHIIqB9IabO65EwHwYDVR0jBBgwFoAU
PQZ/q+iYA5HiauHIIqB9IabO65EwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0B
AQsFAAOCAQEAjsnOHVXNxnu90aAODn1Vo2gb1xbR1TesZ8eJK1ZqcB/DG8J0FZqY
OiiNLLVGxfxmTcjlRbekLp+ERYpwg1fUmfMTS+Vgw0DtSURqvS7CJb6r+w6EzNjP
R1yx/Q5kX6sp4BMiCZ84OsS4yZgt1XHvJgDQoRvxCAZtQl90DDk3nD72jw7TvX49
sb0rLviIx5ByNo3NFHL7WYJA5tPIf3+PFXAt/7GEho/19tqzdOeMYSJCrJr1Hfib
5ORsiMjvXnsrSeRlZerFQ9RWydWCKxXC/j0dNq1j6AC3rvkz+sMp0DY2+6SUYvCv
cWzU98c0P98tYl1qjXysbdOfF6f7KZdfaA==
-----END CERTIFICATE-----
)raw"
   };
}

[[maybe_unused, nodiscard]] constexpr std::string_view test_private_key_rsa() noexcept
{
   return
   {
      R"raw(
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDHZfIk4a4m319D
sPvMoKbhXw/KUb/0RS0i1M977VLRw6uPzEyR7TYJs9u3nt7drF5ziND//ZN5tSoX
ID+ca9URKoEFXFiYZyLlsV1PchYAHEZFRlt9x730PbiKHFeeGf+NHmFpcmk4mpSZ
XcRgHX5llOcHgxt+mVTBYpYDwBcyqWzHT81swZESeH48QLYgChQ/v8M/+1RgRqll
DQpMBXN7oCgYPRgm4W+zTN5o9zXdQd6zEDB9q6gDk2A5CEfMZFU0IxUMrDyMwSe5
n/LwQNPlbQ1N7RbBIyr5RZ7mEu/ckTMPtuF0bEu63CYh2Xy9saYm5er0hKFcLcC+
MrYs0SG9AgMBAAECggEABszQPDfCE6tMeWeAvtK/vjHavQCatj7hsi1lwgku6N5u
bGIAPn3DeQM8O//cA91L/06sKf7A18a4378GzFPVGVfEvKUQlGn4A7NPxlTSsUBF
mTk0B48XSEwOjg83YbnrQCnIEquHMRn8dVqARvLai6ZPVq8+8ctS26F8Ejar09tp
47ioWt6zEJYSz7Lx1ZoM6AfaY5j+3kqjamA7+lcqU8ctiJVXzmxLNOeBzdavBYME
kLsfqmodt2swsPNPVcT19JwwtdHbIth6rrG/hfo/sPGFrkVJtneShMRUty7HJ9FC
hE5H1K4bAvcT4Df/PXjRL3bTHpy+/e3IZgiO0fIGtQKBgQDlteEoVV/NjTwmMmJF
rsxkMSO72HGQeo99DZ2i9dRNKa1Xk7GEn3i+YCdOYyKUQY92plDGhnJens7iAwie
quW5jsB51HzQXKlPzeUl9EHir/VMcZ79+2jwWPam5QXbWysEdxgunH6nuu8WSg0l
xJ3hxckzhDNI++G0Ae34j30k6wKBgQDeN/hQnSj1bYKDIdYEQLBJEzf8eKzgRUyu
6saHdPy6UGbPK6zc+g2suG8hrgk4x8pziF+cpVoH0I/KmAvE9I96InKa/T8BWtxz
VWbudjzVH8uGsoBEjiRpF1WOkTPBn7R9c015Hn46J8a1b5SBagIqv0OYAR0Ljl5W
wA2pvcLJ9wKBgFHtUoaeHHMlYkSFR8NumntJg2MlySssayzAxG4wmy2CJc7MYE3a
yqerh5lPhi+2SkKZAsorfXL91O+LAXIFpbVOkpthC7sMsV5DIu0sdqsw8p33ECup
lT3TnPTdTf90Pp1zFG7bZdjQtSEP/CxyOZUig6YaCmiHXXJkFcnG821NAoGAI2Aj
nqm2OIPrb/a1/E1UAv4VPpLzamx9zabAXhYImZxtEXPxe+guvx1JS8JJ44kiuIuw
NN65216fVXApB3yrTpUnS3cfTZbqW03wKewWuRLrspC+DKvYLgax7xU8eQl0kTgG
0E5DZ/ynDIEr0gJPQADcwNkEh69tY0AFrMzxsncCgYEAzUuynw7lNHjYvZTUDb6f
q9a54fElQRy5eHs3n6bw9VcCMYg3nVaB34/6o2tFa23b6CO+PzDqsT9Y2s4F/mCt
QrP3qxL0Eo7RJo15Op+fY5BZrWLgLUH6x487AZl9/sdfphyKPxjWcSJ9ZGg81G6s
xZgi7y6MNb0NojgAfsBT/gQ=
-----END PRIVATE KEY-----
)raw"
   };
}

/// openssl x509 -in io_threads.pem -inform PEM -out io_threads.der -outform DER
[[maybe_unused]] constexpr auto test_certificate_der_raw = std::to_array<uint8_t>(
   {
      0x30, 0x82, 0x03, 0x15, 0x30, 0x82, 0x01, 0xFD, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x78, 
      0x05, 0x0C, 0xFF, 0x81, 0x37, 0xC8, 0xBA, 0xC6, 0x36, 0x22, 0x96, 0x96, 0xEB, 0xE6, 0xCF, 0xB2, 
      0xB2, 0x1A, 0x49, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 
      0x05, 0x00, 0x30, 0x1A, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0F, 0x69, 
      0x6F, 0x5F, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x2E, 0x74, 0x65, 0x73, 0x74, 0x30, 0x1E, 
      0x17, 0x0D, 0x32, 0x34, 0x31, 0x30, 0x31, 0x30, 0x31, 0x37, 0x34, 0x32, 0x31, 0x32, 0x5A, 0x17, 
      0x0D, 0x33, 0x38, 0x30, 0x36, 0x31, 0x39, 0x31, 0x37, 0x34, 0x32, 0x31, 0x32, 0x5A, 0x30, 0x1A, 
      0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0F, 0x69, 0x6F, 0x5F, 0x74, 0x68, 
      0x72, 0x65, 0x61, 0x64, 0x73, 0x2E, 0x74, 0x65, 0x73, 0x74, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 
      0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 
      0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xC7, 0x65, 0xF2, 0x24, 0xE1, 
      0xAE, 0x26, 0xDF, 0x5F, 0x43, 0xB0, 0xFB, 0xCC, 0xA0, 0xA6, 0xE1, 0x5F, 0x0F, 0xCA, 0x51, 0xBF, 
      0xF4, 0x45, 0x2D, 0x22, 0xD4, 0xCF, 0x7B, 0xED, 0x52, 0xD1, 0xC3, 0xAB, 0x8F, 0xCC, 0x4C, 0x91, 
      0xED, 0x36, 0x09, 0xB3, 0xDB, 0xB7, 0x9E, 0xDE, 0xDD, 0xAC, 0x5E, 0x73, 0x88, 0xD0, 0xFF, 0xFD, 
      0x93, 0x79, 0xB5, 0x2A, 0x17, 0x20, 0x3F, 0x9C, 0x6B, 0xD5, 0x11, 0x2A, 0x81, 0x05, 0x5C, 0x58, 
      0x98, 0x67, 0x22, 0xE5, 0xB1, 0x5D, 0x4F, 0x72, 0x16, 0x00, 0x1C, 0x46, 0x45, 0x46, 0x5B, 0x7D, 
      0xC7, 0xBD, 0xF4, 0x3D, 0xB8, 0x8A, 0x1C, 0x57, 0x9E, 0x19, 0xFF, 0x8D, 0x1E, 0x61, 0x69, 0x72, 
      0x69, 0x38, 0x9A, 0x94, 0x99, 0x5D, 0xC4, 0x60, 0x1D, 0x7E, 0x65, 0x94, 0xE7, 0x07, 0x83, 0x1B, 
      0x7E, 0x99, 0x54, 0xC1, 0x62, 0x96, 0x03, 0xC0, 0x17, 0x32, 0xA9, 0x6C, 0xC7, 0x4F, 0xCD, 0x6C, 
      0xC1, 0x91, 0x12, 0x78, 0x7E, 0x3C, 0x40, 0xB6, 0x20, 0x0A, 0x14, 0x3F, 0xBF, 0xC3, 0x3F, 0xFB, 
      0x54, 0x60, 0x46, 0xA9, 0x65, 0x0D, 0x0A, 0x4C, 0x05, 0x73, 0x7B, 0xA0, 0x28, 0x18, 0x3D, 0x18, 
      0x26, 0xE1, 0x6F, 0xB3, 0x4C, 0xDE, 0x68, 0xF7, 0x35, 0xDD, 0x41, 0xDE, 0xB3, 0x10, 0x30, 0x7D, 
      0xAB, 0xA8, 0x03, 0x93, 0x60, 0x39, 0x08, 0x47, 0xCC, 0x64, 0x55, 0x34, 0x23, 0x15, 0x0C, 0xAC, 
      0x3C, 0x8C, 0xC1, 0x27, 0xB9, 0x9F, 0xF2, 0xF0, 0x40, 0xD3, 0xE5, 0x6D, 0x0D, 0x4D, 0xED, 0x16, 
      0xC1, 0x23, 0x2A, 0xF9, 0x45, 0x9E, 0xE6, 0x12, 0xEF, 0xDC, 0x91, 0x33, 0x0F, 0xB6, 0xE1, 0x74, 
      0x6C, 0x4B, 0xBA, 0xDC, 0x26, 0x21, 0xD9, 0x7C, 0xBD, 0xB1, 0xA6, 0x26, 0xE5, 0xEA, 0xF4, 0x84, 
      0xA1, 0x5C, 0x2D, 0xC0, 0xBE, 0x32, 0xB6, 0x2C, 0xD1, 0x21, 0xBD, 0x02, 0x03, 0x01, 0x00, 0x01, 
      0xA3, 0x53, 0x30, 0x51, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0x3D, 
      0x06, 0x7F, 0xAB, 0xE8, 0x98, 0x03, 0x91, 0xE2, 0x6A, 0xE1, 0xC8, 0x22, 0xA0, 0x7D, 0x21, 0xA6, 
      0xCE, 0xEB, 0x91, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 
      0x3D, 0x06, 0x7F, 0xAB, 0xE8, 0x98, 0x03, 0x91, 0xE2, 0x6A, 0xE1, 0xC8, 0x22, 0xA0, 0x7D, 0x21, 
      0xA6, 0xCE, 0xEB, 0x91, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x05, 
      0x30, 0x03, 0x01, 0x01, 0xFF, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 
      0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x8E, 0xC9, 0xCE, 0x1D, 0x55, 0xCD, 0xC6, 
      0x7B, 0xBD, 0xD1, 0xA0, 0x0E, 0x0E, 0x7D, 0x55, 0xA3, 0x68, 0x1B, 0xD7, 0x16, 0xD1, 0xD5, 0x37, 
      0xAC, 0x67, 0xC7, 0x89, 0x2B, 0x56, 0x6A, 0x70, 0x1F, 0xC3, 0x1B, 0xC2, 0x74, 0x15, 0x9A, 0x98, 
      0x3A, 0x28, 0x8D, 0x2C, 0xB5, 0x46, 0xC5, 0xFC, 0x66, 0x4D, 0xC8, 0xE5, 0x45, 0xB7, 0xA4, 0x2E, 
      0x9F, 0x84, 0x45, 0x8A, 0x70, 0x83, 0x57, 0xD4, 0x99, 0xF3, 0x13, 0x4B, 0xE5, 0x60, 0xC3, 0x40, 
      0xED, 0x49, 0x44, 0x6A, 0xBD, 0x2E, 0xC2, 0x25, 0xBE, 0xAB, 0xFB, 0x0E, 0x84, 0xCC, 0xD8, 0xCF, 
      0x47, 0x5C, 0xB1, 0xFD, 0x0E, 0x64, 0x5F, 0xAB, 0x29, 0xE0, 0x13, 0x22, 0x09, 0x9F, 0x38, 0x3A, 
      0xC4, 0xB8, 0xC9, 0x98, 0x2D, 0xD5, 0x71, 0xEF, 0x26, 0x00, 0xD0, 0xA1, 0x1B, 0xF1, 0x08, 0x06, 
      0x6D, 0x42, 0x5F, 0x74, 0x0C, 0x39, 0x37, 0x9C, 0x3E, 0xF6, 0x8F, 0x0E, 0xD3, 0xBD, 0x7E, 0x3D, 
      0xB1, 0xBD, 0x2B, 0x2E, 0xF8, 0x88, 0xC7, 0x90, 0x72, 0x36, 0x8D, 0xCD, 0x14, 0x72, 0xFB, 0x59, 
      0x82, 0x40, 0xE6, 0xD3, 0xC8, 0x7F, 0x7F, 0x8F, 0x15, 0x70, 0x2D, 0xFF, 0xB1, 0x84, 0x86, 0x8F, 
      0xF5, 0xF6, 0xDA, 0xB3, 0x74, 0xE7, 0x8C, 0x61, 0x22, 0x42, 0xAC, 0x9A, 0xF5, 0x1D, 0xF8, 0x9B, 
      0xE4, 0xE4, 0x6C, 0x88, 0xC8, 0xEF, 0x5E, 0x7B, 0x2B, 0x49, 0xE4, 0x65, 0x65, 0xEA, 0xC5, 0x43, 
      0xD4, 0x56, 0xC9, 0xD5, 0x82, 0x2B, 0x15, 0xC2, 0xFE, 0x3D, 0x1D, 0x36, 0xAD, 0x63, 0xE8, 0x00, 
      0xB7, 0xAE, 0xF9, 0x33, 0xFA, 0xC3, 0x29, 0xD0, 0x36, 0x36, 0xFB, 0xA4, 0x94, 0x62, 0xF0, 0xAF, 
      0x71, 0x6C, 0xD4, 0xF7, 0xC7, 0x34, 0x3F, 0xDF, 0x2D, 0x62, 0x5D, 0x6A, 0x8D, 0x7C, 0xAC, 0x6D, 
      0xD3, 0x9F, 0x17, 0xA7, 0xFB, 0x29, 0x97, 0x5F, 0x68
   }
);
[[maybe_unused, nodiscard]]
constexpr
std::string_view test_certificate_der() noexcept
{
   return
   {
      std::bit_cast<char const *>(test_certificate_der_raw.data()),
      test_certificate_der_raw.size()
   };
}

/// openssl pkcs12 -export -in io_threads.pem -inkey io_threads.key -out io_threads.p12
[[maybe_unused]] constexpr auto test_certificate_p12_raw = std::to_array<uint8_t>(
   {
      0x30, 0x82, 0x09, 0xEF, 0x02, 0x01, 0x03, 0x30, 0x82, 0x09, 0xA5, 0x06, 0x09, 0x2A, 0x86, 0x48, 
      0x86, 0xF7, 0x0D, 0x01, 0x07, 0x01, 0xA0, 0x82, 0x09, 0x96, 0x04, 0x82, 0x09, 0x92, 0x30, 0x82, 
      0x09, 0x8E, 0x30, 0x82, 0x04, 0x02, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 
      0x06, 0xA0, 0x82, 0x03, 0xF3, 0x30, 0x82, 0x03, 0xEF, 0x02, 0x01, 0x00, 0x30, 0x82, 0x03, 0xE8, 
      0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x01, 0x30, 0x57, 0x06, 0x09, 0x2A, 
      0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x05, 0x0D, 0x30, 0x4A, 0x30, 0x29, 0x06, 0x09, 0x2A, 0x86, 
      0x48, 0x86, 0xF7, 0x0D, 0x01, 0x05, 0x0C, 0x30, 0x1C, 0x04, 0x08, 0xC9, 0x13, 0x3C, 0x7E, 0xA1, 
      0x1C, 0x1B, 0x28, 0x02, 0x02, 0x08, 0x00, 0x30, 0x0C, 0x06, 0x08, 0x2A, 0x86, 0x48, 0x86, 0xF7, 
      0x0D, 0x02, 0x09, 0x05, 0x00, 0x30, 0x1D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 
      0x01, 0x2A, 0x04, 0x10, 0x47, 0x63, 0xCD, 0x66, 0xD5, 0xCA, 0xCC, 0x7D, 0x7B, 0xC1, 0xFD, 0x7F, 
      0x5F, 0x1C, 0xFB, 0xAF, 0x80, 0x82, 0x03, 0x80, 0x3B, 0xC6, 0x64, 0xE9, 0xEA, 0xEF, 0xEE, 0x2D, 
      0x64, 0xB9, 0x1A, 0xA5, 0x92, 0x2C, 0xD7, 0x79, 0xD6, 0x0B, 0xD4, 0x66, 0xB2, 0x7C, 0xA8, 0xCA, 
      0x4E, 0x9E, 0xBA, 0x30, 0x10, 0x5E, 0x13, 0xAD, 0xE5, 0x2E, 0xA0, 0xE5, 0x53, 0x82, 0x7E, 0x04, 
      0xB4, 0x2B, 0xAB, 0xAE, 0xE3, 0xE9, 0xA3, 0x88, 0x2F, 0xCF, 0x61, 0x2B, 0x6F, 0x81, 0x8A, 0x45, 
      0xAA, 0x6F, 0xEE, 0xB5, 0x7F, 0xA6, 0x58, 0xCD, 0xB4, 0xE1, 0x79, 0x81, 0x0C, 0x0F, 0xBD, 0x42, 
      0x64, 0x39, 0x5D, 0x27, 0x01, 0x3D, 0x92, 0x9C, 0x84, 0x03, 0x67, 0xDC, 0x03, 0x5D, 0xF1, 0x33, 
      0x37, 0xED, 0x7D, 0x89, 0x87, 0xB2, 0x05, 0x92, 0x3B, 0xFB, 0x24, 0xA9, 0x21, 0x1A, 0x52, 0x9C, 
      0x0F, 0xD4, 0x03, 0x6C, 0xC1, 0xD5, 0x4E, 0x0E, 0xF5, 0x9B, 0x74, 0xC4, 0xDA, 0x0E, 0xB1, 0x5B, 
      0xD5, 0x1A, 0x70, 0x60, 0xE4, 0x63, 0xA9, 0xC4, 0x57, 0xDB, 0xD4, 0x5D, 0x14, 0xD4, 0x00, 0x22, 
      0x48, 0x61, 0x8F, 0x98, 0x0A, 0x52, 0x2D, 0x33, 0x02, 0xAE, 0xA4, 0x80, 0xE9, 0x6E, 0x6D, 0xD8, 
      0x58, 0xCB, 0xB9, 0x9E, 0xC8, 0x55, 0xA5, 0xCB, 0x04, 0x9C, 0x43, 0x8D, 0x60, 0x90, 0x9C, 0xC0, 
      0xD5, 0xA7, 0xF5, 0xF5, 0x79, 0x2C, 0xA9, 0x16, 0x8D, 0x9A, 0x48, 0xA1, 0x76, 0x77, 0x74, 0xF5, 
      0x55, 0x5F, 0xD7, 0x64, 0xB9, 0x6E, 0xEA, 0xCD, 0x6A, 0x7B, 0xF8, 0xBD, 0x27, 0x2A, 0xC6, 0x9E, 
      0x29, 0x72, 0x77, 0xC4, 0x73, 0x76, 0xE1, 0xCD, 0x2F, 0x1D, 0xA6, 0xE3, 0x77, 0xF7, 0x41, 0x6F, 
      0x07, 0x61, 0x69, 0x31, 0x1B, 0x22, 0x19, 0xFA, 0xCD, 0x9C, 0x89, 0xCE, 0xDD, 0x3E, 0xED, 0xAA, 
      0xD9, 0x33, 0x48, 0x15, 0x72, 0x40, 0x34, 0x0C, 0x41, 0x8A, 0x4E, 0x79, 0x8C, 0xCA, 0xB9, 0x3E, 
      0xE5, 0xFE, 0x17, 0xC2, 0x40, 0x9C, 0xCE, 0xAB, 0xD2, 0xAD, 0x00, 0x15, 0xC3, 0x77, 0xD3, 0x31, 
      0x24, 0x80, 0xFA, 0xDB, 0xBE, 0x20, 0x9D, 0x4F, 0xA0, 0x3E, 0xA2, 0x1B, 0x49, 0x15, 0x80, 0x17, 
      0x97, 0xF4, 0xB0, 0xF5, 0x9D, 0xE8, 0x01, 0xAF, 0xCE, 0xE1, 0x09, 0x10, 0xC6, 0xBE, 0xC7, 0xD5, 
      0x8D, 0xBB, 0xEC, 0x6C, 0xA4, 0x58, 0x2B, 0x11, 0xE0, 0x4C, 0xE9, 0xFF, 0x03, 0xEE, 0x56, 0x54, 
      0xF0, 0xBC, 0xE6, 0x2A, 0x65, 0x73, 0xE8, 0x21, 0x8F, 0xD4, 0x36, 0x11, 0x68, 0x94, 0xF4, 0x89, 
      0x6B, 0x1F, 0xA8, 0x6B, 0x53, 0x44, 0xB4, 0xC9, 0x69, 0x37, 0x57, 0x47, 0xC4, 0xAF, 0x87, 0xFA, 
      0x4A, 0x3C, 0x43, 0x15, 0x20, 0xBC, 0x23, 0x57, 0xFB, 0x7D, 0xE4, 0xDF, 0x03, 0x5B, 0xFA, 0x6F, 
      0x76, 0x2C, 0xF3, 0x19, 0xC2, 0x86, 0xD1, 0x83, 0x5F, 0xA7, 0xF6, 0xFC, 0x0D, 0xAA, 0x79, 0xCD, 
      0x51, 0x9D, 0x1B, 0x6D, 0x35, 0xEB, 0x11, 0x48, 0xBB, 0x3D, 0xA3, 0xA3, 0x0B, 0xFC, 0x43, 0x10, 
      0x12, 0x0C, 0x2D, 0x7D, 0x1B, 0x54, 0xD4, 0xA4, 0x81, 0xBF, 0xB3, 0x07, 0x4B, 0xA9, 0x97, 0xC9, 
      0x9E, 0x5D, 0x80, 0x77, 0x81, 0xB0, 0x1D, 0x10, 0x2C, 0x67, 0x0D, 0x33, 0xAD, 0xCF, 0x4B, 0x88, 
      0x9C, 0x50, 0xB2, 0xD7, 0x04, 0xF5, 0x92, 0xB7, 0x75, 0xCD, 0x9D, 0xD1, 0x48, 0xA6, 0xD5, 0x6B, 
      0xB0, 0x52, 0x53, 0x98, 0xF9, 0xCB, 0x1F, 0x76, 0x5E, 0xCE, 0xAC, 0xEC, 0x93, 0x6D, 0x96, 0x9A, 
      0x6B, 0xDE, 0xBB, 0xE0, 0x5A, 0xAD, 0x95, 0xBD, 0x56, 0x01, 0x0F, 0xDD, 0x22, 0x67, 0x5F, 0xD0, 
      0x49, 0x45, 0xDD, 0x8C, 0x8F, 0x05, 0x7D, 0xAC, 0x9E, 0xF9, 0xD1, 0xE1, 0xDE, 0x03, 0xFE, 0x6D, 
      0xA5, 0x57, 0x9E, 0x5D, 0x6A, 0xE0, 0x71, 0xBD, 0x54, 0xD6, 0xC1, 0x4D, 0x75, 0x18, 0x16, 0x17, 
      0xB2, 0x67, 0x11, 0x5D, 0x3B, 0x84, 0x4A, 0x8C, 0x6C, 0x3A, 0x0F, 0xDD, 0x0A, 0xB7, 0x67, 0xB9, 
      0xD1, 0x32, 0x62, 0x43, 0x98, 0x81, 0xF9, 0x0A, 0x2C, 0x9A, 0xD2, 0x61, 0x38, 0x46, 0xDF, 0x83, 
      0x9A, 0xE3, 0x07, 0x2B, 0x34, 0xCA, 0x12, 0x15, 0xB1, 0x8C, 0xD7, 0x86, 0x12, 0x25, 0xAB, 0xEB, 
      0x56, 0xEF, 0xD9, 0x77, 0x7E, 0x40, 0x57, 0xD8, 0x85, 0x4E, 0x93, 0xC6, 0x35, 0x17, 0x3A, 0x02, 
      0x33, 0xDE, 0xDA, 0xE5, 0x68, 0x46, 0x35, 0xA8, 0xBA, 0xB4, 0x2B, 0x91, 0x2C, 0xFE, 0x66, 0x8C, 
      0xDE, 0x66, 0xCB, 0x40, 0x57, 0x86, 0x63, 0x4B, 0x18, 0x39, 0x9B, 0x75, 0xBB, 0xED, 0xA4, 0x76, 
      0x43, 0xDE, 0x91, 0xDF, 0x6F, 0xB7, 0x45, 0xE8, 0xC0, 0x47, 0x2B, 0x0A, 0x2A, 0xCC, 0x61, 0x4B, 
      0x1A, 0xBA, 0xE2, 0x32, 0x62, 0xEC, 0x41, 0xA5, 0x6E, 0x37, 0xC1, 0x5C, 0x41, 0x7B, 0x7B, 0xE4, 
      0x8B, 0x45, 0xA2, 0x03, 0xD7, 0x63, 0x60, 0x00, 0xB3, 0xB1, 0x59, 0xB2, 0x81, 0xA8, 0xFA, 0x59, 
      0x7F, 0x14, 0xA9, 0x90, 0xF7, 0x38, 0x47, 0x85, 0xD0, 0xBA, 0x1C, 0xF8, 0x4A, 0x9F, 0xF4, 0x94, 
      0xA5, 0x8D, 0x9F, 0x7B, 0x87, 0x19, 0x8B, 0x69, 0x75, 0xB8, 0x73, 0xA6, 0x45, 0x62, 0xDD, 0xEF, 
      0xF6, 0xD7, 0xF8, 0x45, 0x10, 0x28, 0xE7, 0xFC, 0xD8, 0x46, 0xA9, 0x4C, 0xE4, 0xCF, 0x9C, 0xE6, 
      0x1B, 0xF7, 0x46, 0xCD, 0x9D, 0x26, 0xF0, 0xD0, 0xFA, 0x0A, 0x9B, 0xB2, 0x6C, 0xAE, 0xA1, 0x41, 
      0xDE, 0x9F, 0xEE, 0xA8, 0x1F, 0x0D, 0x0D, 0x6F, 0x8D, 0x02, 0xB0, 0x7A, 0x35, 0x5A, 0xFF, 0xFC, 
      0x65, 0x4A, 0xDA, 0x87, 0xCB, 0x8E, 0x5A, 0x76, 0x07, 0xF0, 0xDA, 0x68, 0x47, 0xD3, 0xD0, 0x21, 
      0x91, 0xCA, 0xCA, 0x15, 0x1F, 0x0A, 0x8E, 0xAD, 0xB1, 0x81, 0xA4, 0x04, 0xEA, 0x29, 0xE0, 0x4C, 
      0xDD, 0x18, 0x7D, 0x14, 0xF3, 0xFB, 0x28, 0x30, 0xB5, 0xAD, 0xC2, 0xDD, 0x7A, 0x1D, 0x75, 0x05, 
      0x61, 0x57, 0xE9, 0xAC, 0xC3, 0xAA, 0xA1, 0x53, 0xBB, 0x20, 0x83, 0x3C, 0x1F, 0xD5, 0xC5, 0x41, 
      0xCB, 0x55, 0x4E, 0xFE, 0x84, 0x28, 0x27, 0xC1, 0x08, 0x6F, 0x9F, 0x46, 0x45, 0x88, 0x81, 0x7F, 
      0x01, 0x05, 0xB1, 0x0B, 0x68, 0x9D, 0xF5, 0x7A, 0x11, 0x2C, 0x97, 0xD0, 0x52, 0x4C, 0xB6, 0xC3, 
      0xF3, 0x68, 0xAB, 0xCA, 0xC7, 0x81, 0x5A, 0x04, 0x04, 0xCC, 0x81, 0x6F, 0xCF, 0x84, 0x41, 0x54, 
      0xB0, 0xB1, 0x44, 0x16, 0x21, 0x24, 0xE3, 0x69, 0xAC, 0x67, 0xDC, 0x99, 0x48, 0x7D, 0x90, 0x02, 
      0xE0, 0x6E, 0x93, 0x7C, 0x81, 0x8A, 0x02, 0x77, 0xE4, 0x15, 0x1A, 0x41, 0x32, 0xDE, 0x5D, 0xC0, 
      0x66, 0x2E, 0xB5, 0x90, 0xFC, 0x23, 0xCB, 0xAC, 0xA0, 0x0F, 0x32, 0x1D, 0xB7, 0x5F, 0xEB, 0x42, 
      0x8F, 0x71, 0x83, 0x3E, 0x49, 0x29, 0xBE, 0xE4, 0x30, 0x82, 0x05, 0x84, 0x06, 0x09, 0x2A, 0x86, 
      0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x01, 0xA0, 0x82, 0x05, 0x75, 0x04, 0x82, 0x05, 0x71, 0x30, 
      0x82, 0x05, 0x6D, 0x30, 0x82, 0x05, 0x69, 0x06, 0x0B, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 
      0x0C, 0x0A, 0x01, 0x02, 0xA0, 0x82, 0x05, 0x31, 0x30, 0x82, 0x05, 0x2D, 0x30, 0x57, 0x06, 0x09, 
      0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x05, 0x0D, 0x30, 0x4A, 0x30, 0x29, 0x06, 0x09, 0x2A, 
      0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x05, 0x0C, 0x30, 0x1C, 0x04, 0x08, 0x31, 0x84, 0x67, 0x3D, 
      0x81, 0x59, 0x81, 0xD6, 0x02, 0x02, 0x08, 0x00, 0x30, 0x0C, 0x06, 0x08, 0x2A, 0x86, 0x48, 0x86, 
      0xF7, 0x0D, 0x02, 0x09, 0x05, 0x00, 0x30, 0x1D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 
      0x04, 0x01, 0x2A, 0x04, 0x10, 0x4E, 0xE6, 0xE6, 0x86, 0xEF, 0xEF, 0x8F, 0x2F, 0x61, 0x2A, 0x9C, 
      0x20, 0x6D, 0x7C, 0x30, 0x5F, 0x04, 0x82, 0x04, 0xD0, 0x77, 0x6A, 0xC7, 0x3B, 0x01, 0x7D, 0x6A, 
      0x34, 0x64, 0x9B, 0x0F, 0x04, 0xFC, 0x6C, 0x88, 0x86, 0x2C, 0xC0, 0x4D, 0x11, 0x21, 0x64, 0x6B, 
      0x66, 0x07, 0xCD, 0x27, 0xA6, 0xCE, 0xA0, 0x45, 0x1A, 0x33, 0x7D, 0x21, 0x01, 0xB3, 0x15, 0x58, 
      0xAC, 0x1E, 0x42, 0x4E, 0x8C, 0x31, 0x72, 0x9E, 0xA8, 0x28, 0xA8, 0x11, 0x09, 0x03, 0x7B, 0xF7, 
      0xFB, 0x88, 0x5A, 0x91, 0x09, 0xF8, 0xC4, 0x7A, 0xF0, 0x47, 0xEB, 0xF2, 0x60, 0xFA, 0x92, 0x92, 
      0x9C, 0x99, 0x8D, 0x94, 0x21, 0x60, 0x19, 0x7A, 0x56, 0xA4, 0x1F, 0x5B, 0x8A, 0x97, 0x63, 0x53, 
      0x2A, 0x28, 0xB5, 0x90, 0x4A, 0xBE, 0x4F, 0xE1, 0x39, 0x79, 0x69, 0x08, 0x5B, 0xE9, 0xF6, 0xAF, 
      0xAA, 0xE1, 0xFE, 0x48, 0x70, 0xAC, 0xCD, 0xB6, 0xA3, 0x29, 0xFC, 0x99, 0x58, 0xF2, 0x7E, 0x31, 
      0xF4, 0x41, 0xB1, 0xA1, 0x72, 0x04, 0x53, 0x07, 0xCC, 0xC9, 0x43, 0xD5, 0x18, 0xCE, 0xA4, 0x0D, 
      0x3C, 0x6A, 0xF2, 0xAE, 0xEA, 0x8B, 0x73, 0x55, 0xFB, 0xA8, 0x32, 0xA0, 0x21, 0x0A, 0x17, 0x6F, 
      0xCA, 0x6D, 0x0F, 0x09, 0xEB, 0xBC, 0xB4, 0x2E, 0x78, 0xBF, 0x7C, 0x56, 0xC8, 0x85, 0x25, 0x1E, 
      0x1B, 0x22, 0x9C, 0x97, 0xAC, 0x20, 0x66, 0x6C, 0x2F, 0xBB, 0x5E, 0xC6, 0x20, 0x58, 0x70, 0x9D, 
      0x65, 0x87, 0x7F, 0x83, 0xF4, 0x0B, 0xBF, 0xC3, 0x07, 0xE4, 0x5C, 0x6B, 0xC3, 0xB0, 0xE6, 0x06, 
      0x02, 0x53, 0x82, 0xEA, 0x8E, 0xD1, 0xCE, 0xC6, 0xF1, 0xB5, 0xA0, 0x54, 0x4A, 0x49, 0xEB, 0xBC, 
      0x72, 0xB5, 0x76, 0xB9, 0xB1, 0xCC, 0x6A, 0xAB, 0xD5, 0x0A, 0x23, 0xE0, 0x83, 0xB6, 0x21, 0x36, 
      0xC8, 0xDF, 0x68, 0xF0, 0x02, 0xAB, 0xB8, 0x5B, 0x14, 0x54, 0x11, 0x7E, 0x3E, 0x8F, 0x12, 0xC9, 
      0x91, 0x3A, 0x86, 0x2C, 0x74, 0xD9, 0x2D, 0x05, 0xA4, 0xB2, 0xD7, 0x40, 0xBC, 0x36, 0x22, 0xD6, 
      0x34, 0x63, 0x49, 0x7F, 0x36, 0x28, 0xFA, 0xAB, 0x08, 0xA2, 0xCB, 0x23, 0xD0, 0x34, 0x4D, 0x47, 
      0xD1, 0x24, 0x89, 0x5F, 0xB5, 0xD9, 0x30, 0x5C, 0x1B, 0x71, 0x38, 0x54, 0x13, 0x0A, 0x27, 0xE7, 
      0x22, 0x8F, 0xF7, 0x0B, 0x10, 0xE9, 0x4F, 0x64, 0x29, 0x04, 0xAE, 0x10, 0xF9, 0xA6, 0x81, 0x6A, 
      0x72, 0x97, 0x3B, 0xE1, 0xE7, 0x0C, 0x60, 0xB7, 0xF2, 0x68, 0x0C, 0x36, 0xE9, 0xCC, 0x8B, 0xE7, 
      0x6B, 0x59, 0xC0, 0x2B, 0xCA, 0x66, 0x03, 0x34, 0xDF, 0x00, 0x6A, 0xDE, 0xA6, 0x73, 0x53, 0x99, 
      0x39, 0x97, 0x70, 0x30, 0x6C, 0x8F, 0x54, 0x3B, 0xB6, 0x93, 0x57, 0xB6, 0x37, 0x02, 0x18, 0x2C, 
      0xA9, 0xA5, 0xF2, 0xAC, 0x9C, 0x94, 0x43, 0x2F, 0x7C, 0x5F, 0xF2, 0x71, 0x5B, 0x0C, 0x8E, 0x17, 
      0x23, 0x51, 0x49, 0x0E, 0x43, 0xB3, 0x00, 0x25, 0x21, 0xBF, 0x8D, 0x83, 0xBF, 0x36, 0x08, 0x74, 
      0xFE, 0xA1, 0x6A, 0x17, 0xC6, 0xD1, 0x67, 0x5F, 0xDB, 0x93, 0x75, 0x60, 0x96, 0xE1, 0xCD, 0x1F, 
      0xFB, 0xB7, 0xF7, 0x8A, 0x30, 0x9F, 0xC5, 0xAF, 0xB8, 0x7C, 0xC2, 0xC4, 0x59, 0x7C, 0x47, 0x80, 
      0x7F, 0xB7, 0xA6, 0xF4, 0xFB, 0xCC, 0xF8, 0x9C, 0x42, 0x92, 0xAA, 0xFA, 0x72, 0xD4, 0x1A, 0x1D, 
      0x37, 0x6D, 0x95, 0x08, 0xAB, 0x9F, 0x5F, 0x59, 0x69, 0x54, 0xD0, 0x13, 0x7C, 0xAE, 0xFB, 0x8A, 
      0x70, 0x16, 0xB3, 0x3B, 0xA3, 0x4F, 0x0D, 0xA0, 0x14, 0x6E, 0x9F, 0xAF, 0x8F, 0x17, 0x81, 0xF2, 
      0xA0, 0x04, 0x84, 0xDA, 0x8E, 0xFE, 0x4C, 0xB4, 0x2E, 0xE9, 0xD7, 0x71, 0x06, 0xB2, 0x7E, 0x98, 
      0x83, 0x99, 0xE9, 0xB8, 0x80, 0x31, 0x9C, 0x38, 0x78, 0xB6, 0xE4, 0xC7, 0x17, 0xAC, 0x60, 0x09, 
      0x58, 0xE3, 0x79, 0x58, 0xB7, 0x27, 0xA7, 0x76, 0xE3, 0x15, 0x89, 0x2B, 0xF4, 0x92, 0x07, 0x42, 
      0x25, 0x74, 0xF8, 0x3B, 0x00, 0x71, 0x48, 0x68, 0x22, 0x1C, 0x11, 0xBB, 0xF9, 0x16, 0x87, 0xEF, 
      0xFC, 0x36, 0x20, 0x23, 0xBB, 0x34, 0x68, 0x17, 0x46, 0x7B, 0x5A, 0x8E, 0x66, 0x3D, 0x69, 0x3B, 
      0x9B, 0x89, 0x07, 0xD1, 0xC1, 0x48, 0xA7, 0x26, 0x53, 0x3F, 0xB7, 0x9B, 0x42, 0x02, 0x2B, 0x80, 
      0x6A, 0x6C, 0xF6, 0xCE, 0x7C, 0x30, 0x09, 0x08, 0x5B, 0x37, 0x02, 0x9A, 0xA2, 0x6A, 0xB0, 0xD4, 
      0x2D, 0x98, 0xF0, 0xF8, 0x59, 0x1F, 0x62, 0xAE, 0x05, 0x10, 0x1C, 0x58, 0x99, 0x56, 0x79, 0xC7, 
      0x6A, 0xD6, 0xFF, 0xB0, 0x8A, 0x3F, 0xA2, 0x37, 0x8B, 0xD6, 0x6C, 0xD6, 0x84, 0x22, 0xAA, 0x48, 
      0x45, 0xC9, 0xD6, 0xE7, 0x02, 0x17, 0x34, 0xAC, 0x3A, 0x62, 0xDE, 0x3F, 0x61, 0xBE, 0x85, 0x6A, 
      0x52, 0x61, 0x75, 0x47, 0x0B, 0x2B, 0x30, 0x38, 0xFA, 0xC6, 0xDF, 0x15, 0x21, 0x0F, 0x88, 0x31, 
      0x8C, 0xD2, 0xF2, 0x6A, 0x49, 0x41, 0xC8, 0x01, 0x6C, 0x52, 0x3E, 0x35, 0x51, 0xB4, 0x0C, 0xC5, 
      0x48, 0x6B, 0x1F, 0xD3, 0xAA, 0xA9, 0xAE, 0x2D, 0xA5, 0xDC, 0x09, 0xD9, 0xBB, 0x5C, 0xF7, 0x01, 
      0x04, 0xC4, 0xAB, 0x5A, 0x2E, 0x5A, 0x5F, 0x73, 0xCA, 0x12, 0x30, 0x0C, 0x1C, 0x19, 0x38, 0x0F, 
      0xC0, 0x7D, 0xB2, 0x6E, 0xB2, 0x9A, 0x8E, 0x36, 0xC6, 0x7C, 0xDA, 0xE5, 0x93, 0x15, 0xF8, 0xBD, 
      0x45, 0xFE, 0x20, 0xD5, 0x83, 0x15, 0xD6, 0xD1, 0xE6, 0xB5, 0xB8, 0x93, 0x8A, 0xB1, 0xDB, 0x05, 
      0x83, 0x72, 0x65, 0x5E, 0x87, 0x7B, 0x87, 0x13, 0xE8, 0xDB, 0xE5, 0x29, 0xB3, 0x51, 0x6A, 0xC9, 
      0xED, 0xAD, 0x49, 0x7D, 0x99, 0x1B, 0x10, 0x0F, 0x2F, 0xF6, 0x4E, 0xE0, 0x73, 0x5F, 0x29, 0xFE, 
      0x99, 0xF0, 0xE3, 0xD8, 0xD4, 0xC6, 0x2C, 0x98, 0x57, 0x05, 0x27, 0x73, 0x7F, 0x51, 0xBF, 0xCF, 
      0x4D, 0x22, 0x91, 0x63, 0xF2, 0x16, 0xB1, 0x54, 0x39, 0x9E, 0x4B, 0x5C, 0xA5, 0xC5, 0x35, 0x85, 
      0x38, 0x81, 0x19, 0xE9, 0x59, 0xDC, 0x84, 0x0B, 0xF3, 0x93, 0x48, 0x47, 0xA1, 0x6D, 0x88, 0x82, 
      0xA1, 0xA2, 0xFD, 0x6E, 0x03, 0x6A, 0x5A, 0x1A, 0x34, 0x0C, 0x96, 0xDD, 0xDD, 0x00, 0x64, 0x13, 
      0x70, 0xC9, 0x21, 0x76, 0xE4, 0xCD, 0xFD, 0xE4, 0xD4, 0x69, 0x1D, 0xD9, 0x00, 0x33, 0xAB, 0xB0, 
      0x21, 0x54, 0x43, 0xF8, 0x0D, 0xA0, 0x7B, 0xDD, 0x57, 0xBE, 0x4D, 0x2B, 0x5E, 0xB5, 0xE5, 0x77, 
      0x66, 0xCA, 0xE7, 0x3D, 0x0C, 0x1E, 0x1B, 0xC5, 0xA4, 0x78, 0xB1, 0x50, 0xC7, 0x47, 0xED, 0xBA, 
      0x98, 0x8C, 0xAE, 0x5B, 0x5D, 0x6C, 0xA1, 0x59, 0xBE, 0xA3, 0x7A, 0x1A, 0x9D, 0x77, 0x42, 0xEC, 
      0xF2, 0xC1, 0x12, 0x67, 0x20, 0x52, 0xC7, 0x99, 0xA6, 0x8B, 0x25, 0xD5, 0xD3, 0x4D, 0x72, 0x2D, 
      0x87, 0x72, 0xC5, 0x2B, 0xB2, 0x23, 0x19, 0xB4, 0x0E, 0x7C, 0x0B, 0x03, 0x75, 0x3E, 0x5B, 0x58, 
      0xC9, 0x14, 0xBB, 0x54, 0x27, 0x16, 0x6B, 0x44, 0x42, 0xEC, 0x27, 0x38, 0xB3, 0x03, 0x1E, 0x83, 
      0x0A, 0x31, 0xCC, 0x4C, 0x15, 0xAC, 0xDA, 0xA0, 0x93, 0x52, 0x14, 0xEA, 0x3E, 0x61, 0xB8, 0x87, 
      0x4D, 0xB0, 0xD6, 0x57, 0x19, 0x19, 0x74, 0x8D, 0xE0, 0x17, 0x67, 0xC6, 0xEE, 0x67, 0xB8, 0x79, 
      0x4E, 0xE0, 0xDD, 0xB5, 0x6A, 0x51, 0xAE, 0xC6, 0xCA, 0xEA, 0x21, 0x8F, 0x0D, 0x38, 0xA6, 0xEB, 
      0x14, 0x94, 0xE6, 0x57, 0x72, 0x2B, 0xC7, 0x71, 0x7E, 0xDD, 0x9D, 0x3E, 0x7F, 0x52, 0xD9, 0xF4, 
      0xEB, 0x81, 0x88, 0x79, 0xAD, 0x2B, 0x0F, 0xE3, 0xCD, 0x76, 0xB4, 0x56, 0xEA, 0xF5, 0xA4, 0xB6, 
      0x38, 0x34, 0xAC, 0xB3, 0x40, 0xBD, 0x9E, 0x1A, 0x28, 0x6F, 0x59, 0xFA, 0xE9, 0x86, 0xF9, 0x5B, 
      0x46, 0xE2, 0x0D, 0x60, 0x02, 0x3B, 0x11, 0x5C, 0x89, 0x4A, 0x74, 0x21, 0xCD, 0xF6, 0x8E, 0xE7, 
      0x79, 0x96, 0x65, 0xD6, 0xA8, 0xF5, 0x67, 0xDB, 0x7F, 0x59, 0x69, 0x74, 0x63, 0x83, 0x98, 0x0A, 
      0x07, 0x33, 0xC8, 0x15, 0x6D, 0x4E, 0x03, 0xC7, 0x55, 0x60, 0x7C, 0xF0, 0xDF, 0xF7, 0xB4, 0x79, 
      0x76, 0xFC, 0x43, 0xC0, 0x78, 0x6E, 0x7D, 0x38, 0x8A, 0x25, 0xDD, 0xBE, 0x54, 0xF1, 0x31, 0xEA, 
      0xCA, 0x8D, 0xEF, 0x7B, 0x2E, 0x73, 0x7C, 0x05, 0x01, 0x78, 0x07, 0xD8, 0x24, 0x57, 0x45, 0x82, 
      0x58, 0x23, 0x3B, 0xF4, 0x4C, 0x57, 0x9B, 0xBE, 0x9F, 0x56, 0xB4, 0xFC, 0x91, 0x0B, 0xC0, 0xD3, 
      0x9D, 0x3B, 0x75, 0xB1, 0xF1, 0x8B, 0x56, 0x02, 0x5D, 0xA8, 0xAA, 0xE8, 0xB8, 0x08, 0x05, 0x51, 
      0x06, 0xAF, 0xD9, 0xA4, 0xA6, 0x46, 0x0E, 0xBC, 0x79, 0x4D, 0x51, 0x25, 0xD0, 0xA2, 0x17, 0x62, 
      0xAD, 0x49, 0x94, 0xDD, 0xD5, 0xBC, 0x75, 0xA7, 0xFD, 0x68, 0x8C, 0x75, 0x73, 0x33, 0x90, 0x65, 
      0xF3, 0x2F, 0xD6, 0x2A, 0x29, 0x8E, 0x91, 0xAF, 0x79, 0x09, 0x05, 0x07, 0xB7, 0xF6, 0x0D, 0x51, 
      0x74, 0x3D, 0xD7, 0x5B, 0x5F, 0xB3, 0xA0, 0x55, 0x79, 0x13, 0x16, 0x92, 0x5C, 0x00, 0x7A, 0x9B, 
      0x4F, 0xEE, 0xAE, 0xA3, 0xD5, 0xE6, 0x21, 0x25, 0xD4, 0x9A, 0x32, 0x9D, 0xA4, 0x43, 0x30, 0xAD, 
      0x95, 0x05, 0x8D, 0x74, 0xC1, 0x54, 0xE6, 0x12, 0x00, 0x31, 0x25, 0x30, 0x23, 0x06, 0x09, 0x2A, 
      0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x15, 0x31, 0x16, 0x04, 0x14, 0xA9, 0x11, 0xEC, 0x36, 
      0x7E, 0x90, 0x22, 0x90, 0x76, 0xAA, 0x19, 0x09, 0xC5, 0x1B, 0xCD, 0xF0, 0x3C, 0xE7, 0x19, 0x78, 
      0x30, 0x41, 0x30, 0x31, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 
      0x01, 0x05, 0x00, 0x04, 0x20, 0x2E, 0x82, 0x0A, 0x4F, 0xB7, 0xFD, 0x40, 0xCC, 0x08, 0xF3, 0xC9, 
      0x26, 0x40, 0xF9, 0x4E, 0x21, 0x16, 0x9F, 0x2B, 0xB6, 0xD8, 0x49, 0x09, 0x9D, 0xDC, 0x28, 0x95, 
      0x94, 0xD2, 0x32, 0xBE, 0xFC, 0x04, 0x08, 0x34, 0xCD, 0xC2, 0x66, 0x99, 0x04, 0x35, 0xF9, 0x02, 
      0x02, 0x08, 0x00
   }
);
[[maybe_unused, nodiscard]]
constexpr
std::string_view test_certificate_p12() noexcept
{
   return
   {
      std::bit_cast<char const *>(test_certificate_p12_raw.data()),
      test_certificate_p12_raw.size()
   };
}

}
